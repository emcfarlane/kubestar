package main

import (
	"flag"
	"fmt"
	"os"
	"sort"
	"strings"
	"testing"

	"github.com/emcfarlane/starlarkproto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

var flagGenStar = flag.Bool("genstar", false, "Verbose mode.")

func TestProto(t *testing.T) {
	flag.Parse()

	var b strings.Builder
	b.WriteString("# generated by go generate; DO NOT EDIT\n")
	type identifier struct {
		protoreflect.FileDescriptor
		name string
	}
	var (
		fds []identifier
	)

	for name, value := range globals {
		if fd, ok := value.(*starlarkproto.Descriptor); ok {
			fds = append(fds, identifier{
				FileDescriptor: fd.Descriptor().(protoreflect.FileDescriptor),
				name:           name,
			})

		}
	}

	sort.Slice(fds, func(i, j int) bool {
		return fds[i].Path() < fds[j].Path()
	})
	for _, fd := range fds {
		name := fd.name

		path := fd.Path()
		fmt.Fprintf(&b, "%s = proto.file(%q)\n", name, path)
	}

	if *flagGenStar {
		if err := os.WriteFile("protos.star", []byte(b.String()), 0644); err != nil {
			t.Fatal(err)
		}
		t.Log("wrote protos.star")
	} else {
		t.Log(b.String())
	}
}

// TODO: easily convert YAML to proto to Starlark
func TestYAMLtoSTAR(t *testing.T) {
	tests := []struct {
		name string
		file string
	}{{
		name: "init",
		file: "testdata/yaml.yaml",
	}}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fsrc, err := os.ReadFile(tt.file)
			if err != nil {
				t.Fatal(err)
			}

			msgs, err := yamlToProtos(string(fsrc))
			if err != nil {
				t.Fatal(err)
			}

			for _, msg := range msgs {
				t.Log(msg)
			}
		})
	}
}
