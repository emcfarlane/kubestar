//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: k8s.io/api/flowcontrol/v1beta2/generated.proto

package v1beta2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	_ "k8s.io/apimachinery/pkg/runtime"
	_ "k8s.io/apimachinery/pkg/runtime/schema"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type FlowDistinguisherMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `type` is the type of flow distinguisher method
	// The supported types are "ByUser" and "ByNamespace".
	// Required.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (x *FlowDistinguisherMethod) Reset() {
	*x = FlowDistinguisherMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDistinguisherMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDistinguisherMethod) ProtoMessage() {}

func (x *FlowDistinguisherMethod) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDistinguisherMethod.ProtoReflect.Descriptor instead.
func (*FlowDistinguisherMethod) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{0}
}

func (x *FlowDistinguisherMethod) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with
// similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
type FlowSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `metadata` is the standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// `spec` is the specification of the desired behavior of a FlowSchema.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec *FlowSchemaSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// `status` is the current status of a FlowSchema.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status *FlowSchemaStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *FlowSchema) Reset() {
	*x = FlowSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSchema) ProtoMessage() {}

func (x *FlowSchema) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSchema.ProtoReflect.Descriptor instead.
func (*FlowSchema) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{1}
}

func (x *FlowSchema) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FlowSchema) GetSpec() *FlowSchemaSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *FlowSchema) GetStatus() *FlowSchemaStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type FlowSchemaCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `type` is the type of the condition.
	// Required.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// `status` is the status of the condition.
	// Can be True, False, Unknown.
	// Required.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime *v1.Time `protobuf:"bytes,3,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (x *FlowSchemaCondition) Reset() {
	*x = FlowSchemaCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSchemaCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSchemaCondition) ProtoMessage() {}

func (x *FlowSchemaCondition) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSchemaCondition.ProtoReflect.Descriptor instead.
func (*FlowSchemaCondition) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{2}
}

func (x *FlowSchemaCondition) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *FlowSchemaCondition) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *FlowSchemaCondition) GetLastTransitionTime() *v1.Time {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *FlowSchemaCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *FlowSchemaCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// FlowSchemaList is a list of FlowSchema objects.
type FlowSchemaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `metadata` is the standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// `items` is a list of FlowSchemas.
	Items []*FlowSchema `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *FlowSchemaList) Reset() {
	*x = FlowSchemaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSchemaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSchemaList) ProtoMessage() {}

func (x *FlowSchemaList) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSchemaList.ProtoReflect.Descriptor instead.
func (*FlowSchemaList) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{3}
}

func (x *FlowSchemaList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FlowSchemaList) GetItems() []*FlowSchema {
	if x != nil {
		return x.Items
	}
	return nil
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type FlowSchemaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot
	// be resolved, the FlowSchema will be ignored and marked as invalid in its status.
	// Required.
	PriorityLevelConfiguration *PriorityLevelConfigurationReference `protobuf:"bytes,1,opt,name=priorityLevelConfiguration" json:"priorityLevelConfiguration,omitempty"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen
	// FlowSchema is among those with the numerically lowest (which we take to be logically highest)
	// MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000].
	// Note that if the precedence is not specified, it will be set to 1000 as default.
	// +optional
	MatchingPrecedence *int32 `protobuf:"varint,2,opt,name=matchingPrecedence" json:"matchingPrecedence,omitempty"`
	// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema.
	// `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
	// +optional
	DistinguisherMethod *FlowDistinguisherMethod `protobuf:"bytes,3,opt,name=distinguisherMethod" json:"distinguisherMethod,omitempty"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if
	// at least one member of rules matches the request.
	// if it is an empty slice, there will be no requests matching the FlowSchema.
	// +listType=atomic
	// +optional
	Rules []*PolicyRulesWithSubjects `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
}

func (x *FlowSchemaSpec) Reset() {
	*x = FlowSchemaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSchemaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSchemaSpec) ProtoMessage() {}

func (x *FlowSchemaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSchemaSpec.ProtoReflect.Descriptor instead.
func (*FlowSchemaSpec) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{4}
}

func (x *FlowSchemaSpec) GetPriorityLevelConfiguration() *PriorityLevelConfigurationReference {
	if x != nil {
		return x.PriorityLevelConfiguration
	}
	return nil
}

func (x *FlowSchemaSpec) GetMatchingPrecedence() int32 {
	if x != nil && x.MatchingPrecedence != nil {
		return *x.MatchingPrecedence
	}
	return 0
}

func (x *FlowSchemaSpec) GetDistinguisherMethod() *FlowDistinguisherMethod {
	if x != nil {
		return x.DistinguisherMethod
	}
	return nil
}

func (x *FlowSchemaSpec) GetRules() []*PolicyRulesWithSubjects {
	if x != nil {
		return x.Rules
	}
	return nil
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type FlowSchemaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `conditions` is a list of the current states of FlowSchema.
	// +listType=map
	// +listMapKey=type
	// +optional
	Conditions []*FlowSchemaCondition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
}

func (x *FlowSchemaStatus) Reset() {
	*x = FlowSchemaStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSchemaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSchemaStatus) ProtoMessage() {}

func (x *FlowSchemaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSchemaStatus.ProtoReflect.Descriptor instead.
func (*FlowSchemaStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{5}
}

func (x *FlowSchemaStatus) GetConditions() []*FlowSchemaCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// GroupSubject holds detailed information for group-kind subject.
type GroupSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the user group that matches, or "*" to match all user groups.
	// See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some
	// well-known group names.
	// Required.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *GroupSubject) Reset() {
	*x = GroupSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSubject) ProtoMessage() {}

func (x *GroupSubject) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSubject.ProtoReflect.Descriptor instead.
func (*GroupSubject) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{6}
}

func (x *GroupSubject) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// LimitResponse defines how to handle requests that can not be executed right now.
// +union
type LimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `type` is "Queue" or "Reject".
	// "Queue" means that requests that can not be executed upon arrival
	// are held in a queue until they can be executed or a queuing limit
	// is reached.
	// "Reject" means that requests that can not be executed upon arrival
	// are rejected.
	// Required.
	// +unionDiscriminator
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// `queuing` holds the configuration parameters for queuing.
	// This field may be non-empty only if `type` is `"Queue"`.
	// +optional
	Queuing *QueuingConfiguration `protobuf:"bytes,2,opt,name=queuing" json:"queuing,omitempty"`
}

func (x *LimitResponse) Reset() {
	*x = LimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitResponse) ProtoMessage() {}

func (x *LimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitResponse.ProtoReflect.Descriptor instead.
func (*LimitResponse) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{7}
}

func (x *LimitResponse) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *LimitResponse) GetQueuing() *QueuingConfiguration {
	if x != nil {
		return x.Queuing
	}
	return nil
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits.
// It addresses two issues:
//  * How are requests for this priority level limited?
//  * What should be done with requests that exceed the limit?
type LimitedPriorityLevelConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `assuredConcurrencyShares` (ACS) configures the execution
	// limit, which is a limit on the number of requests of this
	// priority level that may be exeucting at a given time.  ACS must
	// be a positive number. The server's concurrency limit (SCL) is
	// divided among the concurrency-controlled priority levels in
	// proportion to their assured concurrency shares. This produces
	// the assured concurrency value (ACV) --- the number of requests
	// that may be executing at a time --- for each such priority
	// level:
	//
	//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	//
	// bigger numbers of ACS mean more reserved concurrent requests (at the
	// expense of every other PL).
	// This field has a default value of 30.
	// +optional
	AssuredConcurrencyShares *int32 `protobuf:"varint,1,opt,name=assuredConcurrencyShares" json:"assuredConcurrencyShares,omitempty"`
	// `limitResponse` indicates what to do with requests that can not be executed right now
	LimitResponse *LimitResponse `protobuf:"bytes,2,opt,name=limitResponse" json:"limitResponse,omitempty"`
}

func (x *LimitedPriorityLevelConfiguration) Reset() {
	*x = LimitedPriorityLevelConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitedPriorityLevelConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitedPriorityLevelConfiguration) ProtoMessage() {}

func (x *LimitedPriorityLevelConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitedPriorityLevelConfiguration.ProtoReflect.Descriptor instead.
func (*LimitedPriorityLevelConfiguration) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{8}
}

func (x *LimitedPriorityLevelConfiguration) GetAssuredConcurrencyShares() int32 {
	if x != nil && x.AssuredConcurrencyShares != nil {
		return *x.AssuredConcurrencyShares
	}
	return 0
}

func (x *LimitedPriorityLevelConfiguration) GetLimitResponse() *LimitResponse {
	if x != nil {
		return x.LimitResponse
	}
	return nil
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the
// target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member
// of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type NonResourcePolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `verbs` is a list of matching verbs and may not be empty.
	// "*" matches all verbs. If it is present, it must be the only entry.
	// +listType=set
	// Required.
	Verbs []string `protobuf:"bytes,1,rep,name=verbs" json:"verbs,omitempty"`
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty.
	// For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry.
	// +listType=set
	// Required.
	NonResourceURLs []string `protobuf:"bytes,6,rep,name=nonResourceURLs" json:"nonResourceURLs,omitempty"`
}

func (x *NonResourcePolicyRule) Reset() {
	*x = NonResourcePolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonResourcePolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonResourcePolicyRule) ProtoMessage() {}

func (x *NonResourcePolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonResourcePolicyRule.ProtoReflect.Descriptor instead.
func (*NonResourcePolicyRule) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{9}
}

func (x *NonResourcePolicyRule) GetVerbs() []string {
	if x != nil {
		return x.Verbs
	}
	return nil
}

func (x *NonResourcePolicyRule) GetNonResourceURLs() []string {
	if x != nil {
		return x.NonResourceURLs
	}
	return nil
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject
// making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches
// a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member
// of resourceRules or nonResourceRules matches the request.
type PolicyRulesWithSubjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subjects is the list of normal user, serviceaccount, or group that this rule cares about.
	// There must be at least one member in this slice.
	// A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request.
	// +listType=atomic
	// Required.
	Subjects []*Subject `protobuf:"bytes,1,rep,name=subjects" json:"subjects,omitempty"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the
	// target resource.
	// At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	// +listType=atomic
	// +optional
	ResourceRules []*ResourcePolicyRule `protobuf:"bytes,2,rep,name=resourceRules" json:"resourceRules,omitempty"`
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb
	// and the target non-resource URL.
	// +listType=atomic
	// +optional
	NonResourceRules []*NonResourcePolicyRule `protobuf:"bytes,3,rep,name=nonResourceRules" json:"nonResourceRules,omitempty"`
}

func (x *PolicyRulesWithSubjects) Reset() {
	*x = PolicyRulesWithSubjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRulesWithSubjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRulesWithSubjects) ProtoMessage() {}

func (x *PolicyRulesWithSubjects) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRulesWithSubjects.ProtoReflect.Descriptor instead.
func (*PolicyRulesWithSubjects) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{10}
}

func (x *PolicyRulesWithSubjects) GetSubjects() []*Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *PolicyRulesWithSubjects) GetResourceRules() []*ResourcePolicyRule {
	if x != nil {
		return x.ResourceRules
	}
	return nil
}

func (x *PolicyRulesWithSubjects) GetNonResourceRules() []*NonResourcePolicyRule {
	if x != nil {
		return x.NonResourceRules
	}
	return nil
}

// PriorityLevelConfiguration represents the configuration of a priority level.
type PriorityLevelConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `metadata` is the standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// `spec` is the specification of the desired behavior of a "request-priority".
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec *PriorityLevelConfigurationSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// `status` is the current status of a "request-priority".
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status *PriorityLevelConfigurationStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *PriorityLevelConfiguration) Reset() {
	*x = PriorityLevelConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityLevelConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLevelConfiguration) ProtoMessage() {}

func (x *PriorityLevelConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLevelConfiguration.ProtoReflect.Descriptor instead.
func (*PriorityLevelConfiguration) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{11}
}

func (x *PriorityLevelConfiguration) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PriorityLevelConfiguration) GetSpec() *PriorityLevelConfigurationSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PriorityLevelConfiguration) GetStatus() *PriorityLevelConfigurationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type PriorityLevelConfigurationCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `type` is the type of the condition.
	// Required.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// `status` is the status of the condition.
	// Can be True, False, Unknown.
	// Required.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// `lastTransitionTime` is the last time the condition transitioned from one status to another.
	LastTransitionTime *v1.Time `protobuf:"bytes,3,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (x *PriorityLevelConfigurationCondition) Reset() {
	*x = PriorityLevelConfigurationCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityLevelConfigurationCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLevelConfigurationCondition) ProtoMessage() {}

func (x *PriorityLevelConfigurationCondition) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLevelConfigurationCondition.ProtoReflect.Descriptor instead.
func (*PriorityLevelConfigurationCondition) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{12}
}

func (x *PriorityLevelConfigurationCondition) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PriorityLevelConfigurationCondition) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *PriorityLevelConfigurationCondition) GetLastTransitionTime() *v1.Time {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *PriorityLevelConfigurationCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *PriorityLevelConfigurationCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
type PriorityLevelConfigurationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `metadata` is the standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// `items` is a list of request-priorities.
	Items []*PriorityLevelConfiguration `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *PriorityLevelConfigurationList) Reset() {
	*x = PriorityLevelConfigurationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityLevelConfigurationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLevelConfigurationList) ProtoMessage() {}

func (x *PriorityLevelConfigurationList) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLevelConfigurationList.ProtoReflect.Descriptor instead.
func (*PriorityLevelConfigurationList) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{13}
}

func (x *PriorityLevelConfigurationList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PriorityLevelConfigurationList) GetItems() []*PriorityLevelConfiguration {
	if x != nil {
		return x.Items
	}
	return nil
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type PriorityLevelConfigurationReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `name` is the name of the priority level configuration being referenced
	// Required.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *PriorityLevelConfigurationReference) Reset() {
	*x = PriorityLevelConfigurationReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityLevelConfigurationReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLevelConfigurationReference) ProtoMessage() {}

func (x *PriorityLevelConfigurationReference) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLevelConfigurationReference.ProtoReflect.Descriptor instead.
func (*PriorityLevelConfigurationReference) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{14}
}

func (x *PriorityLevelConfigurationReference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
// +union
type PriorityLevelConfigurationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `type` indicates whether this priority level is subject to
	// limitation on request execution.  A value of `"Exempt"` means
	// that requests of this priority level are not subject to a limit
	// (and thus are never queued) and do not detract from the
	// capacity made available to other priority levels.  A value of
	// `"Limited"` means that (a) requests of this priority level
	// _are_ subject to limits and (b) some of the server's limited
	// capacity is made available exclusively to this priority level.
	// Required.
	// +unionDiscriminator
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// `limited` specifies how requests are handled for a Limited priority level.
	// This field must be non-empty if and only if `type` is `"Limited"`.
	// +optional
	Limited *LimitedPriorityLevelConfiguration `protobuf:"bytes,2,opt,name=limited" json:"limited,omitempty"`
}

func (x *PriorityLevelConfigurationSpec) Reset() {
	*x = PriorityLevelConfigurationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityLevelConfigurationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLevelConfigurationSpec) ProtoMessage() {}

func (x *PriorityLevelConfigurationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLevelConfigurationSpec.ProtoReflect.Descriptor instead.
func (*PriorityLevelConfigurationSpec) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{15}
}

func (x *PriorityLevelConfigurationSpec) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PriorityLevelConfigurationSpec) GetLimited() *LimitedPriorityLevelConfiguration {
	if x != nil {
		return x.Limited
	}
	return nil
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type PriorityLevelConfigurationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `conditions` is the current state of "request-priority".
	// +listType=map
	// +listMapKey=type
	// +optional
	Conditions []*PriorityLevelConfigurationCondition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
}

func (x *PriorityLevelConfigurationStatus) Reset() {
	*x = PriorityLevelConfigurationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityLevelConfigurationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityLevelConfigurationStatus) ProtoMessage() {}

func (x *PriorityLevelConfigurationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityLevelConfigurationStatus.ProtoReflect.Descriptor instead.
func (*PriorityLevelConfigurationStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{16}
}

func (x *PriorityLevelConfigurationStatus) GetConditions() []*PriorityLevelConfigurationCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// QueuingConfiguration holds the configuration parameters for queuing
type QueuingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `queues` is the number of queues for this priority level. The
	// queues exist independently at each apiserver. The value must be
	// positive.  Setting it to 1 effectively precludes
	// shufflesharding and thus makes the distinguisher method of
	// associated flow schemas irrelevant.  This field has a default
	// value of 64.
	// +optional
	Queues *int32 `protobuf:"varint,1,opt,name=queues" json:"queues,omitempty"`
	// `handSize` is a small positive number that configures the
	// shuffle sharding of requests into queues.  When enqueuing a request
	// at this priority level the request's flow identifier (a string
	// pair) is hashed and the hash value is used to shuffle the list
	// of queues and deal a hand of the size specified here.  The
	// request is put into one of the shortest queues in that hand.
	// `handSize` must be no larger than `queues`, and should be
	// significantly smaller (so that a few heavy flows do not
	// saturate most of the queues).  See the user-facing
	// documentation for more extensive guidance on setting this
	// field.  This field has a default value of 8.
	// +optional
	HandSize *int32 `protobuf:"varint,2,opt,name=handSize" json:"handSize,omitempty"`
	// `queueLengthLimit` is the maximum number of requests allowed to
	// be waiting in a given queue of this priority level at a time;
	// excess requests are rejected.  This value must be positive.  If
	// not specified, it will be defaulted to 50.
	// +optional
	QueueLengthLimit *int32 `protobuf:"varint,3,opt,name=queueLengthLimit" json:"queueLengthLimit,omitempty"`
}

func (x *QueuingConfiguration) Reset() {
	*x = QueuingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuingConfiguration) ProtoMessage() {}

func (x *QueuingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuingConfiguration.ProtoReflect.Descriptor instead.
func (*QueuingConfiguration) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{17}
}

func (x *QueuingConfiguration) GetQueues() int32 {
	if x != nil && x.Queues != nil {
		return *x.Queues
	}
	return 0
}

func (x *QueuingConfiguration) GetHandSize() int32 {
	if x != nil && x.HandSize != nil {
		return *x.HandSize
	}
	return 0
}

func (x *QueuingConfiguration) GetQueueLengthLimit() int32 {
	if x != nil && x.QueueLengthLimit != nil {
		return *x.QueueLengthLimit
	}
	return 0
}

// ResourcePolicyRule is a predicate that matches some resource
// requests, testing the request's verb and the target resource. A
// ResourcePolicyRule matches a resource request if and only if: (a)
// at least one member of verbs matches the request, (b) at least one
// member of apiGroups matches the request, (c) at least one member of
// resources matches the request, and (d) either (d1) the request does
// not specify a namespace (i.e., `Namespace==""`) and clusterScope is
// true or (d2) the request specifies a namespace and least one member
// of namespaces matches the request's namespace.
type ResourcePolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `verbs` is a list of matching verbs and may not be empty.
	// "*" matches all verbs and, if present, must be the only entry.
	// +listType=set
	// Required.
	Verbs []string `protobuf:"bytes,1,rep,name=verbs" json:"verbs,omitempty"`
	// `apiGroups` is a list of matching API groups and may not be empty.
	// "*" matches all API groups and, if present, must be the only entry.
	// +listType=set
	// Required.
	ApiGroups []string `protobuf:"bytes,2,rep,name=apiGroups" json:"apiGroups,omitempty"`
	// `resources` is a list of matching resources (i.e., lowercase
	// and plural) with, if desired, subresource.  For example, [
	// "services", "nodes/status" ].  This list may not be empty.
	// "*" matches all resources and, if present, must be the only entry.
	// Required.
	// +listType=set
	Resources []string `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	// `clusterScope` indicates whether to match requests that do not
	// specify a namespace (which happens either because the resource
	// is not namespaced or the request targets all namespaces).
	// If this field is omitted or false then the `namespaces` field
	// must contain a non-empty list.
	// +optional
	ClusterScope *bool `protobuf:"varint,4,opt,name=clusterScope" json:"clusterScope,omitempty"`
	// `namespaces` is a list of target namespaces that restricts
	// matches.  A request that specifies a target namespace matches
	// only if either (a) this list contains that target namespace or
	// (b) this list contains "*".  Note that "*" matches any
	// specified namespace but does not match a request that _does
	// not specify_ a namespace (see the `clusterScope` field for
	// that).
	// This list may be empty, but only if `clusterScope` is true.
	// +optional
	// +listType=set
	Namespaces []string `protobuf:"bytes,5,rep,name=namespaces" json:"namespaces,omitempty"`
}

func (x *ResourcePolicyRule) Reset() {
	*x = ResourcePolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePolicyRule) ProtoMessage() {}

func (x *ResourcePolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePolicyRule.ProtoReflect.Descriptor instead.
func (*ResourcePolicyRule) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{18}
}

func (x *ResourcePolicyRule) GetVerbs() []string {
	if x != nil {
		return x.Verbs
	}
	return nil
}

func (x *ResourcePolicyRule) GetApiGroups() []string {
	if x != nil {
		return x.ApiGroups
	}
	return nil
}

func (x *ResourcePolicyRule) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ResourcePolicyRule) GetClusterScope() bool {
	if x != nil && x.ClusterScope != nil {
		return *x.ClusterScope
	}
	return false
}

func (x *ResourcePolicyRule) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type ServiceAccountSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `namespace` is the namespace of matching ServiceAccount objects.
	// Required.
	Namespace *string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name.
	// Required.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *ServiceAccountSubject) Reset() {
	*x = ServiceAccountSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccountSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccountSubject) ProtoMessage() {}

func (x *ServiceAccountSubject) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccountSubject.ProtoReflect.Descriptor instead.
func (*ServiceAccountSubject) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{19}
}

func (x *ServiceAccountSubject) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *ServiceAccountSubject) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three
// ways of matching an originator; by user, group, or service account.
// +union
type Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `kind` indicates which one of the other fields is non-empty.
	// Required
	// +unionDiscriminator
	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// `user` matches based on username.
	// +optional
	User *UserSubject `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// `group` matches based on user group name.
	// +optional
	Group *GroupSubject `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	// `serviceAccount` matches ServiceAccounts.
	// +optional
	ServiceAccount *ServiceAccountSubject `protobuf:"bytes,4,opt,name=serviceAccount" json:"serviceAccount,omitempty"`
}

func (x *Subject) Reset() {
	*x = Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{20}
}

func (x *Subject) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Subject) GetUser() *UserSubject {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Subject) GetGroup() *GroupSubject {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Subject) GetServiceAccount() *ServiceAccountSubject {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

// UserSubject holds detailed information for user-kind subject.
type UserSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `name` is the username that matches, or "*" to match all usernames.
	// Required.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *UserSubject) Reset() {
	*x = UserSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubject) ProtoMessage() {}

func (x *UserSubject) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubject.ProtoReflect.Descriptor instead.
func (*UserSubject) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP(), []int{21}
}

func (x *UserSubject) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

var File_k8s_io_api_flowcontrol_v1beta2_generated_proto protoreflect.FileDescriptor

var file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x2d, 0x0a, 0x17, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x4c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0e,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x80, 0x03, 0x0a,
	0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x83, 0x01, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x63, 0x65,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x13, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x4d, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x67, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x22, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x0d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4e, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e,
	0x67, 0x22, 0xb4, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x4e, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x73, 0x22, 0x9b, 0x02, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x10,
	0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x6e,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x98, 0x02, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x23, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbe, 0x01, 0x0a,
	0x1e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x39, 0x0a,
	0x23, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x5b, 0x0a, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x22, 0x87, 0x01, 0x0a,
	0x20, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x63, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x76, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xaa,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x15, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5d, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x20, 0x5a,
	0x1e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x6f, 0x77,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
}

var (
	file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescOnce sync.Once
	file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescData = file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDesc
)

func file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescGZIP() []byte {
	file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescOnce.Do(func() {
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescData = protoimpl.X.CompressGZIP(file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescData)
	})
	return file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDescData
}

var file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_k8s_io_api_flowcontrol_v1beta2_generated_proto_goTypes = []interface{}{
	(*FlowDistinguisherMethod)(nil),             // 0: k8s.io.api.flowcontrol.v1beta2.FlowDistinguisherMethod
	(*FlowSchema)(nil),                          // 1: k8s.io.api.flowcontrol.v1beta2.FlowSchema
	(*FlowSchemaCondition)(nil),                 // 2: k8s.io.api.flowcontrol.v1beta2.FlowSchemaCondition
	(*FlowSchemaList)(nil),                      // 3: k8s.io.api.flowcontrol.v1beta2.FlowSchemaList
	(*FlowSchemaSpec)(nil),                      // 4: k8s.io.api.flowcontrol.v1beta2.FlowSchemaSpec
	(*FlowSchemaStatus)(nil),                    // 5: k8s.io.api.flowcontrol.v1beta2.FlowSchemaStatus
	(*GroupSubject)(nil),                        // 6: k8s.io.api.flowcontrol.v1beta2.GroupSubject
	(*LimitResponse)(nil),                       // 7: k8s.io.api.flowcontrol.v1beta2.LimitResponse
	(*LimitedPriorityLevelConfiguration)(nil),   // 8: k8s.io.api.flowcontrol.v1beta2.LimitedPriorityLevelConfiguration
	(*NonResourcePolicyRule)(nil),               // 9: k8s.io.api.flowcontrol.v1beta2.NonResourcePolicyRule
	(*PolicyRulesWithSubjects)(nil),             // 10: k8s.io.api.flowcontrol.v1beta2.PolicyRulesWithSubjects
	(*PriorityLevelConfiguration)(nil),          // 11: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfiguration
	(*PriorityLevelConfigurationCondition)(nil), // 12: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationCondition
	(*PriorityLevelConfigurationList)(nil),      // 13: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationList
	(*PriorityLevelConfigurationReference)(nil), // 14: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationReference
	(*PriorityLevelConfigurationSpec)(nil),      // 15: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationSpec
	(*PriorityLevelConfigurationStatus)(nil),    // 16: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationStatus
	(*QueuingConfiguration)(nil),                // 17: k8s.io.api.flowcontrol.v1beta2.QueuingConfiguration
	(*ResourcePolicyRule)(nil),                  // 18: k8s.io.api.flowcontrol.v1beta2.ResourcePolicyRule
	(*ServiceAccountSubject)(nil),               // 19: k8s.io.api.flowcontrol.v1beta2.ServiceAccountSubject
	(*Subject)(nil),                             // 20: k8s.io.api.flowcontrol.v1beta2.Subject
	(*UserSubject)(nil),                         // 21: k8s.io.api.flowcontrol.v1beta2.UserSubject
	(*v1.ObjectMeta)(nil),                       // 22: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v1.Time)(nil),                             // 23: k8s.io.apimachinery.pkg.apis.meta.v1.Time
	(*v1.ListMeta)(nil),                         // 24: k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
}
var file_k8s_io_api_flowcontrol_v1beta2_generated_proto_depIdxs = []int32{
	22, // 0: k8s.io.api.flowcontrol.v1beta2.FlowSchema.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	4,  // 1: k8s.io.api.flowcontrol.v1beta2.FlowSchema.spec:type_name -> k8s.io.api.flowcontrol.v1beta2.FlowSchemaSpec
	5,  // 2: k8s.io.api.flowcontrol.v1beta2.FlowSchema.status:type_name -> k8s.io.api.flowcontrol.v1beta2.FlowSchemaStatus
	23, // 3: k8s.io.api.flowcontrol.v1beta2.FlowSchemaCondition.lastTransitionTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	24, // 4: k8s.io.api.flowcontrol.v1beta2.FlowSchemaList.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	1,  // 5: k8s.io.api.flowcontrol.v1beta2.FlowSchemaList.items:type_name -> k8s.io.api.flowcontrol.v1beta2.FlowSchema
	14, // 6: k8s.io.api.flowcontrol.v1beta2.FlowSchemaSpec.priorityLevelConfiguration:type_name -> k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationReference
	0,  // 7: k8s.io.api.flowcontrol.v1beta2.FlowSchemaSpec.distinguisherMethod:type_name -> k8s.io.api.flowcontrol.v1beta2.FlowDistinguisherMethod
	10, // 8: k8s.io.api.flowcontrol.v1beta2.FlowSchemaSpec.rules:type_name -> k8s.io.api.flowcontrol.v1beta2.PolicyRulesWithSubjects
	2,  // 9: k8s.io.api.flowcontrol.v1beta2.FlowSchemaStatus.conditions:type_name -> k8s.io.api.flowcontrol.v1beta2.FlowSchemaCondition
	17, // 10: k8s.io.api.flowcontrol.v1beta2.LimitResponse.queuing:type_name -> k8s.io.api.flowcontrol.v1beta2.QueuingConfiguration
	7,  // 11: k8s.io.api.flowcontrol.v1beta2.LimitedPriorityLevelConfiguration.limitResponse:type_name -> k8s.io.api.flowcontrol.v1beta2.LimitResponse
	20, // 12: k8s.io.api.flowcontrol.v1beta2.PolicyRulesWithSubjects.subjects:type_name -> k8s.io.api.flowcontrol.v1beta2.Subject
	18, // 13: k8s.io.api.flowcontrol.v1beta2.PolicyRulesWithSubjects.resourceRules:type_name -> k8s.io.api.flowcontrol.v1beta2.ResourcePolicyRule
	9,  // 14: k8s.io.api.flowcontrol.v1beta2.PolicyRulesWithSubjects.nonResourceRules:type_name -> k8s.io.api.flowcontrol.v1beta2.NonResourcePolicyRule
	22, // 15: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfiguration.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	15, // 16: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfiguration.spec:type_name -> k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationSpec
	16, // 17: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfiguration.status:type_name -> k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationStatus
	23, // 18: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationCondition.lastTransitionTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	24, // 19: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationList.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	11, // 20: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationList.items:type_name -> k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfiguration
	8,  // 21: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationSpec.limited:type_name -> k8s.io.api.flowcontrol.v1beta2.LimitedPriorityLevelConfiguration
	12, // 22: k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationStatus.conditions:type_name -> k8s.io.api.flowcontrol.v1beta2.PriorityLevelConfigurationCondition
	21, // 23: k8s.io.api.flowcontrol.v1beta2.Subject.user:type_name -> k8s.io.api.flowcontrol.v1beta2.UserSubject
	6,  // 24: k8s.io.api.flowcontrol.v1beta2.Subject.group:type_name -> k8s.io.api.flowcontrol.v1beta2.GroupSubject
	19, // 25: k8s.io.api.flowcontrol.v1beta2.Subject.serviceAccount:type_name -> k8s.io.api.flowcontrol.v1beta2.ServiceAccountSubject
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_k8s_io_api_flowcontrol_v1beta2_generated_proto_init() }
func file_k8s_io_api_flowcontrol_v1beta2_generated_proto_init() {
	if File_k8s_io_api_flowcontrol_v1beta2_generated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDistinguisherMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSchemaCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSchemaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSchemaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSchemaStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitedPriorityLevelConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonResourcePolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRulesWithSubjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityLevelConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityLevelConfigurationCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityLevelConfigurationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityLevelConfigurationReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityLevelConfigurationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityLevelConfigurationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccountSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_k8s_io_api_flowcontrol_v1beta2_generated_proto_goTypes,
		DependencyIndexes: file_k8s_io_api_flowcontrol_v1beta2_generated_proto_depIdxs,
		MessageInfos:      file_k8s_io_api_flowcontrol_v1beta2_generated_proto_msgTypes,
	}.Build()
	File_k8s_io_api_flowcontrol_v1beta2_generated_proto = out.File
	file_k8s_io_api_flowcontrol_v1beta2_generated_proto_rawDesc = nil
	file_k8s_io_api_flowcontrol_v1beta2_generated_proto_goTypes = nil
	file_k8s_io_api_flowcontrol_v1beta2_generated_proto_depIdxs = nil
}
