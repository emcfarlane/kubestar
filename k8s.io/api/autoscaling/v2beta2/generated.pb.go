//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: k8s.io/api/autoscaling/v2beta2/generated.proto

package v2beta2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	_ "k8s.io/apimachinery/pkg/runtime"
	_ "k8s.io/apimachinery/pkg/runtime/schema"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ContainerResourceMetricSource indicates how to scale on a resource metric known to
// Kubernetes, as specified in requests and limits, describing each pod in the
// current scale target (e.g. CPU or memory).  The values will be averaged
// together before being compared to the target.  Such metrics are built in to
// Kubernetes, and have special scaling options on top of those available to
// normal per-pod metrics using the "pods" source.  Only one "target" type
// should be set.
type ContainerResourceMetricSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the resource in question.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// target specifies the target value for the given metric
	Target *MetricTarget `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	// container is the name of the container in the pods of the scaling target
	Container *string `protobuf:"bytes,3,opt,name=container" json:"container,omitempty"`
}

func (x *ContainerResourceMetricSource) Reset() {
	*x = ContainerResourceMetricSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResourceMetricSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResourceMetricSource) ProtoMessage() {}

func (x *ContainerResourceMetricSource) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResourceMetricSource.ProtoReflect.Descriptor instead.
func (*ContainerResourceMetricSource) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{0}
}

func (x *ContainerResourceMetricSource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContainerResourceMetricSource) GetTarget() *MetricTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ContainerResourceMetricSource) GetContainer() string {
	if x != nil && x.Container != nil {
		return *x.Container
	}
	return ""
}

// ContainerResourceMetricStatus indicates the current value of a resource metric known to
// Kubernetes, as specified in requests and limits, describing a single container in each pod in the
// current scale target (e.g. CPU or memory).  Such metrics are built in to
// Kubernetes, and have special scaling options on top of those available to
// normal per-pod metrics using the "pods" source.
type ContainerResourceMetricStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the resource in question.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// current contains the current value for the given metric
	Current *MetricValueStatus `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
	// Container is the name of the container in the pods of the scaling target
	Container *string `protobuf:"bytes,3,opt,name=container" json:"container,omitempty"`
}

func (x *ContainerResourceMetricStatus) Reset() {
	*x = ContainerResourceMetricStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResourceMetricStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResourceMetricStatus) ProtoMessage() {}

func (x *ContainerResourceMetricStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResourceMetricStatus.ProtoReflect.Descriptor instead.
func (*ContainerResourceMetricStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerResourceMetricStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContainerResourceMetricStatus) GetCurrent() *MetricValueStatus {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *ContainerResourceMetricStatus) GetContainer() string {
	if x != nil && x.Container != nil {
		return *x.Container
	}
	return ""
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type CrossVersionObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// API version of the referent
	// +optional
	ApiVersion *string `protobuf:"bytes,3,opt,name=apiVersion" json:"apiVersion,omitempty"`
}

func (x *CrossVersionObjectReference) Reset() {
	*x = CrossVersionObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossVersionObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossVersionObjectReference) ProtoMessage() {}

func (x *CrossVersionObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossVersionObjectReference.ProtoReflect.Descriptor instead.
func (*CrossVersionObjectReference) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{2}
}

func (x *CrossVersionObjectReference) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *CrossVersionObjectReference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CrossVersionObjectReference) GetApiVersion() string {
	if x != nil && x.ApiVersion != nil {
		return *x.ApiVersion
	}
	return ""
}

// ExternalMetricSource indicates how to scale on a metric not associated with
// any Kubernetes object (for example length of queue in cloud
// messaging service, or QPS from loadbalancer running outside of cluster).
type ExternalMetricSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric identifies the target metric by name and selector
	Metric *MetricIdentifier `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	// target specifies the target value for the given metric
	Target *MetricTarget `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (x *ExternalMetricSource) Reset() {
	*x = ExternalMetricSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalMetricSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalMetricSource) ProtoMessage() {}

func (x *ExternalMetricSource) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalMetricSource.ProtoReflect.Descriptor instead.
func (*ExternalMetricSource) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalMetricSource) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *ExternalMetricSource) GetTarget() *MetricTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

// ExternalMetricStatus indicates the current value of a global metric
// not associated with any Kubernetes object.
type ExternalMetricStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric identifies the target metric by name and selector
	Metric *MetricIdentifier `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	// current contains the current value for the given metric
	Current *MetricValueStatus `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
}

func (x *ExternalMetricStatus) Reset() {
	*x = ExternalMetricStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalMetricStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalMetricStatus) ProtoMessage() {}

func (x *ExternalMetricStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalMetricStatus.ProtoReflect.Descriptor instead.
func (*ExternalMetricStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{4}
}

func (x *ExternalMetricStatus) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *ExternalMetricStatus) GetCurrent() *MetricValueStatus {
	if x != nil {
		return x.Current
	}
	return nil
}

// HPAScalingPolicy is a single policy which must hold true for a specified past interval.
type HPAScalingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is used to specify the scaling policy.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Value contains the amount of change which is permitted by the policy.
	// It must be greater than zero
	Value *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	// PeriodSeconds specifies the window of time for which the policy should hold true.
	// PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
	PeriodSeconds *int32 `protobuf:"varint,3,opt,name=periodSeconds" json:"periodSeconds,omitempty"`
}

func (x *HPAScalingPolicy) Reset() {
	*x = HPAScalingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPAScalingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPAScalingPolicy) ProtoMessage() {}

func (x *HPAScalingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPAScalingPolicy.ProtoReflect.Descriptor instead.
func (*HPAScalingPolicy) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{5}
}

func (x *HPAScalingPolicy) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *HPAScalingPolicy) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *HPAScalingPolicy) GetPeriodSeconds() int32 {
	if x != nil && x.PeriodSeconds != nil {
		return *x.PeriodSeconds
	}
	return 0
}

// HPAScalingRules configures the scaling behavior for one direction.
// These Rules are applied after calculating DesiredReplicas from metrics for the HPA.
// They can limit the scaling velocity by specifying scaling policies.
// They can prevent flapping by specifying the stabilization window, so that the
// number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
type HPAScalingRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StabilizationWindowSeconds is the number of seconds for which past recommendations should be
	// considered while scaling up or scaling down.
	// StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
	// If not set, use the default values:
	// - For scale up: 0 (i.e. no stabilization is done).
	// - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
	// +optional
	StabilizationWindowSeconds *int32 `protobuf:"varint,3,opt,name=stabilizationWindowSeconds" json:"stabilizationWindowSeconds,omitempty"`
	// selectPolicy is used to specify which policy should be used.
	// If not set, the default value MaxPolicySelect is used.
	// +optional
	SelectPolicy *string `protobuf:"bytes,1,opt,name=selectPolicy" json:"selectPolicy,omitempty"`
	// policies is a list of potential scaling polices which can be used during scaling.
	// At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
	// +optional
	Policies []*HPAScalingPolicy `protobuf:"bytes,2,rep,name=policies" json:"policies,omitempty"`
}

func (x *HPAScalingRules) Reset() {
	*x = HPAScalingRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPAScalingRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPAScalingRules) ProtoMessage() {}

func (x *HPAScalingRules) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPAScalingRules.ProtoReflect.Descriptor instead.
func (*HPAScalingRules) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{6}
}

func (x *HPAScalingRules) GetStabilizationWindowSeconds() int32 {
	if x != nil && x.StabilizationWindowSeconds != nil {
		return *x.StabilizationWindowSeconds
	}
	return 0
}

func (x *HPAScalingRules) GetSelectPolicy() string {
	if x != nil && x.SelectPolicy != nil {
		return *x.SelectPolicy
	}
	return ""
}

func (x *HPAScalingRules) GetPolicies() []*HPAScalingPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod
// autoscaler, which automatically manages the replica count of any resource
// implementing the scale subresource based on the metrics specified.
type HorizontalPodAutoscaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata is the standard object metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// spec is the specification for the behaviour of the autoscaler.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	// +optional
	Spec *HorizontalPodAutoscalerSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// status is the current information about the autoscaler.
	// +optional
	Status *HorizontalPodAutoscalerStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *HorizontalPodAutoscaler) Reset() {
	*x = HorizontalPodAutoscaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscaler) ProtoMessage() {}

func (x *HorizontalPodAutoscaler) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscaler.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscaler) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{7}
}

func (x *HorizontalPodAutoscaler) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HorizontalPodAutoscaler) GetSpec() *HorizontalPodAutoscalerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *HorizontalPodAutoscaler) GetStatus() *HorizontalPodAutoscalerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// HorizontalPodAutoscalerBehavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
type HorizontalPodAutoscalerBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scaleUp is scaling policy for scaling Up.
	// If not set, the default value is the higher of:
	//   * increase no more than 4 pods per 60 seconds
	//   * double the number of pods per 60 seconds
	// No stabilization is used.
	// +optional
	ScaleUp *HPAScalingRules `protobuf:"bytes,1,opt,name=scaleUp" json:"scaleUp,omitempty"`
	// scaleDown is scaling policy for scaling Down.
	// If not set, the default value is to allow to scale down to minReplicas pods, with a
	// 300 second stabilization window (i.e., the highest recommendation for
	// the last 300sec is used).
	// +optional
	ScaleDown *HPAScalingRules `protobuf:"bytes,2,opt,name=scaleDown" json:"scaleDown,omitempty"`
}

func (x *HorizontalPodAutoscalerBehavior) Reset() {
	*x = HorizontalPodAutoscalerBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscalerBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscalerBehavior) ProtoMessage() {}

func (x *HorizontalPodAutoscalerBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscalerBehavior.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscalerBehavior) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{8}
}

func (x *HorizontalPodAutoscalerBehavior) GetScaleUp() *HPAScalingRules {
	if x != nil {
		return x.ScaleUp
	}
	return nil
}

func (x *HorizontalPodAutoscalerBehavior) GetScaleDown() *HPAScalingRules {
	if x != nil {
		return x.ScaleDown
	}
	return nil
}

// HorizontalPodAutoscalerCondition describes the state of
// a HorizontalPodAutoscaler at a certain point.
type HorizontalPodAutoscalerCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type describes the current condition
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// status is the status of the condition (True, False, Unknown)
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// lastTransitionTime is the last time the condition transitioned from
	// one status to another
	// +optional
	LastTransitionTime *v1.Time `protobuf:"bytes,3,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// reason is the reason for the condition's last transition.
	// +optional
	Reason *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	// message is a human-readable explanation containing details about
	// the transition
	// +optional
	Message *string `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (x *HorizontalPodAutoscalerCondition) Reset() {
	*x = HorizontalPodAutoscalerCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscalerCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscalerCondition) ProtoMessage() {}

func (x *HorizontalPodAutoscalerCondition) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscalerCondition.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscalerCondition) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{9}
}

func (x *HorizontalPodAutoscalerCondition) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *HorizontalPodAutoscalerCondition) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *HorizontalPodAutoscalerCondition) GetLastTransitionTime() *v1.Time {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *HorizontalPodAutoscalerCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *HorizontalPodAutoscalerCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
type HorizontalPodAutoscalerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata is the standard list metadata.
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// items is the list of horizontal pod autoscaler objects.
	Items []*HorizontalPodAutoscaler `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *HorizontalPodAutoscalerList) Reset() {
	*x = HorizontalPodAutoscalerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscalerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscalerList) ProtoMessage() {}

func (x *HorizontalPodAutoscalerList) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscalerList.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscalerList) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{10}
}

func (x *HorizontalPodAutoscalerList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HorizontalPodAutoscalerList) GetItems() []*HorizontalPodAutoscaler {
	if x != nil {
		return x.Items
	}
	return nil
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
type HorizontalPodAutoscalerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
	// should be collected, as well as to actually change the replica count.
	ScaleTargetRef *CrossVersionObjectReference `protobuf:"bytes,1,opt,name=scaleTargetRef" json:"scaleTargetRef,omitempty"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler
	// can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
	// alpha feature gate HPAScaleToZero is enabled and at least one Object or External
	// metric is configured.  Scaling is active as long as at least one metric value is
	// available.
	// +optional
	MinReplicas *int32 `protobuf:"varint,2,opt,name=minReplicas" json:"minReplicas,omitempty"`
	// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
	// It cannot be less that minReplicas.
	MaxReplicas *int32 `protobuf:"varint,3,opt,name=maxReplicas" json:"maxReplicas,omitempty"`
	// metrics contains the specifications for which to use to calculate the
	// desired replica count (the maximum replica count across all metrics will
	// be used).  The desired replica count is calculated multiplying the
	// ratio between the target value and the current value by the current
	// number of pods.  Ergo, metrics used must decrease as the pod count is
	// increased, and vice-versa.  See the individual metric source types for
	// more information about how each type of metric must respond.
	// If not set, the default metric will be set to 80% average CPU utilization.
	// +optional
	Metrics []*MetricSpec `protobuf:"bytes,4,rep,name=metrics" json:"metrics,omitempty"`
	// behavior configures the scaling behavior of the target
	// in both Up and Down directions (scaleUp and scaleDown fields respectively).
	// If not set, the default HPAScalingRules for scale up and scale down are used.
	// +optional
	Behavior *HorizontalPodAutoscalerBehavior `protobuf:"bytes,5,opt,name=behavior" json:"behavior,omitempty"`
}

func (x *HorizontalPodAutoscalerSpec) Reset() {
	*x = HorizontalPodAutoscalerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscalerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscalerSpec) ProtoMessage() {}

func (x *HorizontalPodAutoscalerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscalerSpec.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscalerSpec) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{11}
}

func (x *HorizontalPodAutoscalerSpec) GetScaleTargetRef() *CrossVersionObjectReference {
	if x != nil {
		return x.ScaleTargetRef
	}
	return nil
}

func (x *HorizontalPodAutoscalerSpec) GetMinReplicas() int32 {
	if x != nil && x.MinReplicas != nil {
		return *x.MinReplicas
	}
	return 0
}

func (x *HorizontalPodAutoscalerSpec) GetMaxReplicas() int32 {
	if x != nil && x.MaxReplicas != nil {
		return *x.MaxReplicas
	}
	return 0
}

func (x *HorizontalPodAutoscalerSpec) GetMetrics() []*MetricSpec {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *HorizontalPodAutoscalerSpec) GetBehavior() *HorizontalPodAutoscalerBehavior {
	if x != nil {
		return x.Behavior
	}
	return nil
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
type HorizontalPodAutoscalerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// observedGeneration is the most recent generation observed by this autoscaler.
	// +optional
	ObservedGeneration *int64 `protobuf:"varint,1,opt,name=observedGeneration" json:"observedGeneration,omitempty"`
	// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods,
	// used by the autoscaler to control how often the number of pods is changed.
	// +optional
	LastScaleTime *v1.Time `protobuf:"bytes,2,opt,name=lastScaleTime" json:"lastScaleTime,omitempty"`
	// currentReplicas is current number of replicas of pods managed by this autoscaler,
	// as last seen by the autoscaler.
	CurrentReplicas *int32 `protobuf:"varint,3,opt,name=currentReplicas" json:"currentReplicas,omitempty"`
	// desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
	// as last calculated by the autoscaler.
	DesiredReplicas *int32 `protobuf:"varint,4,opt,name=desiredReplicas" json:"desiredReplicas,omitempty"`
	// currentMetrics is the last read state of the metrics used by this autoscaler.
	// +optional
	CurrentMetrics []*MetricStatus `protobuf:"bytes,5,rep,name=currentMetrics" json:"currentMetrics,omitempty"`
	// conditions is the set of conditions required for this autoscaler to scale its target,
	// and indicates whether or not those conditions are met.
	// +optional
	Conditions []*HorizontalPodAutoscalerCondition `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
}

func (x *HorizontalPodAutoscalerStatus) Reset() {
	*x = HorizontalPodAutoscalerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscalerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscalerStatus) ProtoMessage() {}

func (x *HorizontalPodAutoscalerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscalerStatus.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscalerStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{12}
}

func (x *HorizontalPodAutoscalerStatus) GetObservedGeneration() int64 {
	if x != nil && x.ObservedGeneration != nil {
		return *x.ObservedGeneration
	}
	return 0
}

func (x *HorizontalPodAutoscalerStatus) GetLastScaleTime() *v1.Time {
	if x != nil {
		return x.LastScaleTime
	}
	return nil
}

func (x *HorizontalPodAutoscalerStatus) GetCurrentReplicas() int32 {
	if x != nil && x.CurrentReplicas != nil {
		return *x.CurrentReplicas
	}
	return 0
}

func (x *HorizontalPodAutoscalerStatus) GetDesiredReplicas() int32 {
	if x != nil && x.DesiredReplicas != nil {
		return *x.DesiredReplicas
	}
	return 0
}

func (x *HorizontalPodAutoscalerStatus) GetCurrentMetrics() []*MetricStatus {
	if x != nil {
		return x.CurrentMetrics
	}
	return nil
}

func (x *HorizontalPodAutoscalerStatus) GetConditions() []*HorizontalPodAutoscalerCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// MetricIdentifier defines the name and optionally selector for a metric
type MetricIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the given metric
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// selector is the string-encoded form of a standard kubernetes label selector for the given metric
	// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
	// When unset, just the metricName will be used to gather metrics.
	// +optional
	Selector *v1.LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (x *MetricIdentifier) Reset() {
	*x = MetricIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIdentifier) ProtoMessage() {}

func (x *MetricIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIdentifier.ProtoReflect.Descriptor instead.
func (*MetricIdentifier) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{13}
}

func (x *MetricIdentifier) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MetricIdentifier) GetSelector() *v1.LabelSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

// MetricSpec specifies how to scale based on a single metric
// (only `type` and one other matching field should be set at once).
type MetricSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of metric source.  It should be one of "ContainerResource", "External",
	// "Object", "Pods" or "Resource", each mapping to a matching field in the object.
	// Note: "ContainerResource" type is available on when the feature-gate
	// HPAContainerMetrics is enabled
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// object refers to a metric describing a single kubernetes object
	// (for example, hits-per-second on an Ingress object).
	// +optional
	Object *ObjectMetricSource `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
	// pods refers to a metric describing each pod in the current scale target
	// (for example, transactions-processed-per-second).  The values will be
	// averaged together before being compared to the target value.
	// +optional
	Pods *PodsMetricSource `protobuf:"bytes,3,opt,name=pods" json:"pods,omitempty"`
	// resource refers to a resource metric (such as those specified in
	// requests and limits) known to Kubernetes describing each pod in the
	// current scale target (e.g. CPU or memory). Such metrics are built in to
	// Kubernetes, and have special scaling options on top of those available
	// to normal per-pod metrics using the "pods" source.
	// +optional
	Resource *ResourceMetricSource `protobuf:"bytes,4,opt,name=resource" json:"resource,omitempty"`
	// container resource refers to a resource metric (such as those specified in
	// requests and limits) known to Kubernetes describing a single container in
	// each pod of the current scale target (e.g. CPU or memory). Such metrics are
	// built in to Kubernetes, and have special scaling options on top of those
	// available to normal per-pod metrics using the "pods" source.
	// This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.
	// +optional
	ContainerResource *ContainerResourceMetricSource `protobuf:"bytes,7,opt,name=containerResource" json:"containerResource,omitempty"`
	// external refers to a global metric that is not associated
	// with any Kubernetes object. It allows autoscaling based on information
	// coming from components running outside of cluster
	// (for example length of queue in cloud messaging service, or
	// QPS from loadbalancer running outside of cluster).
	// +optional
	External *ExternalMetricSource `protobuf:"bytes,5,opt,name=external" json:"external,omitempty"`
}

func (x *MetricSpec) Reset() {
	*x = MetricSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSpec) ProtoMessage() {}

func (x *MetricSpec) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSpec.ProtoReflect.Descriptor instead.
func (*MetricSpec) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{14}
}

func (x *MetricSpec) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MetricSpec) GetObject() *ObjectMetricSource {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *MetricSpec) GetPods() *PodsMetricSource {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *MetricSpec) GetResource() *ResourceMetricSource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *MetricSpec) GetContainerResource() *ContainerResourceMetricSource {
	if x != nil {
		return x.ContainerResource
	}
	return nil
}

func (x *MetricSpec) GetExternal() *ExternalMetricSource {
	if x != nil {
		return x.External
	}
	return nil
}

// MetricStatus describes the last-read state of a single metric.
type MetricStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of metric source.  It will be one of "ContainerResource", "External",
	// "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
	// Note: "ContainerResource" type is available on when the feature-gate
	// HPAContainerMetrics is enabled
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// object refers to a metric describing a single kubernetes object
	// (for example, hits-per-second on an Ingress object).
	// +optional
	Object *ObjectMetricStatus `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
	// pods refers to a metric describing each pod in the current scale target
	// (for example, transactions-processed-per-second).  The values will be
	// averaged together before being compared to the target value.
	// +optional
	Pods *PodsMetricStatus `protobuf:"bytes,3,opt,name=pods" json:"pods,omitempty"`
	// resource refers to a resource metric (such as those specified in
	// requests and limits) known to Kubernetes describing each pod in the
	// current scale target (e.g. CPU or memory). Such metrics are built in to
	// Kubernetes, and have special scaling options on top of those available
	// to normal per-pod metrics using the "pods" source.
	// +optional
	Resource *ResourceMetricStatus `protobuf:"bytes,4,opt,name=resource" json:"resource,omitempty"`
	// container resource refers to a resource metric (such as those specified in
	// requests and limits) known to Kubernetes describing a single container in each pod in the
	// current scale target (e.g. CPU or memory). Such metrics are built in to
	// Kubernetes, and have special scaling options on top of those available
	// to normal per-pod metrics using the "pods" source.
	// +optional
	ContainerResource *ContainerResourceMetricStatus `protobuf:"bytes,7,opt,name=containerResource" json:"containerResource,omitempty"`
	// external refers to a global metric that is not associated
	// with any Kubernetes object. It allows autoscaling based on information
	// coming from components running outside of cluster
	// (for example length of queue in cloud messaging service, or
	// QPS from loadbalancer running outside of cluster).
	// +optional
	External *ExternalMetricStatus `protobuf:"bytes,5,opt,name=external" json:"external,omitempty"`
}

func (x *MetricStatus) Reset() {
	*x = MetricStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricStatus) ProtoMessage() {}

func (x *MetricStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricStatus.ProtoReflect.Descriptor instead.
func (*MetricStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{15}
}

func (x *MetricStatus) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MetricStatus) GetObject() *ObjectMetricStatus {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *MetricStatus) GetPods() *PodsMetricStatus {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *MetricStatus) GetResource() *ResourceMetricStatus {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *MetricStatus) GetContainerResource() *ContainerResourceMetricStatus {
	if x != nil {
		return x.ContainerResource
	}
	return nil
}

func (x *MetricStatus) GetExternal() *ExternalMetricStatus {
	if x != nil {
		return x.External
	}
	return nil
}

// MetricTarget defines the target value, average value, or average utilization of a specific metric
type MetricTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type represents whether the metric type is Utilization, Value, or AverageValue
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// value is the target value of the metric (as a quantity).
	// +optional
	Value *resource.Quantity `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// averageValue is the target value of the average of the
	// metric across all relevant pods (as a quantity)
	// +optional
	AverageValue *resource.Quantity `protobuf:"bytes,3,opt,name=averageValue" json:"averageValue,omitempty"`
	// averageUtilization is the target value of the average of the
	// resource metric across all relevant pods, represented as a percentage of
	// the requested value of the resource for the pods.
	// Currently only valid for Resource metric source type
	// +optional
	AverageUtilization *int32 `protobuf:"varint,4,opt,name=averageUtilization" json:"averageUtilization,omitempty"`
}

func (x *MetricTarget) Reset() {
	*x = MetricTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricTarget) ProtoMessage() {}

func (x *MetricTarget) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricTarget.ProtoReflect.Descriptor instead.
func (*MetricTarget) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{16}
}

func (x *MetricTarget) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MetricTarget) GetValue() *resource.Quantity {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MetricTarget) GetAverageValue() *resource.Quantity {
	if x != nil {
		return x.AverageValue
	}
	return nil
}

func (x *MetricTarget) GetAverageUtilization() int32 {
	if x != nil && x.AverageUtilization != nil {
		return *x.AverageUtilization
	}
	return 0
}

// MetricValueStatus holds the current value for a metric
type MetricValueStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is the current value of the metric (as a quantity).
	// +optional
	Value *resource.Quantity `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// averageValue is the current value of the average of the
	// metric across all relevant pods (as a quantity)
	// +optional
	AverageValue *resource.Quantity `protobuf:"bytes,2,opt,name=averageValue" json:"averageValue,omitempty"`
	// currentAverageUtilization is the current value of the average of the
	// resource metric across all relevant pods, represented as a percentage of
	// the requested value of the resource for the pods.
	// +optional
	AverageUtilization *int32 `protobuf:"varint,3,opt,name=averageUtilization" json:"averageUtilization,omitempty"`
}

func (x *MetricValueStatus) Reset() {
	*x = MetricValueStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricValueStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricValueStatus) ProtoMessage() {}

func (x *MetricValueStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricValueStatus.ProtoReflect.Descriptor instead.
func (*MetricValueStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{17}
}

func (x *MetricValueStatus) GetValue() *resource.Quantity {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MetricValueStatus) GetAverageValue() *resource.Quantity {
	if x != nil {
		return x.AverageValue
	}
	return nil
}

func (x *MetricValueStatus) GetAverageUtilization() int32 {
	if x != nil && x.AverageUtilization != nil {
		return *x.AverageUtilization
	}
	return 0
}

// ObjectMetricSource indicates how to scale on a metric describing a
// kubernetes object (for example, hits-per-second on an Ingress object).
type ObjectMetricSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescribedObject *CrossVersionObjectReference `protobuf:"bytes,1,opt,name=describedObject" json:"describedObject,omitempty"`
	// target specifies the target value for the given metric
	Target *MetricTarget `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	// metric identifies the target metric by name and selector
	Metric *MetricIdentifier `protobuf:"bytes,3,opt,name=metric" json:"metric,omitempty"`
}

func (x *ObjectMetricSource) Reset() {
	*x = ObjectMetricSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectMetricSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMetricSource) ProtoMessage() {}

func (x *ObjectMetricSource) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMetricSource.ProtoReflect.Descriptor instead.
func (*ObjectMetricSource) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{18}
}

func (x *ObjectMetricSource) GetDescribedObject() *CrossVersionObjectReference {
	if x != nil {
		return x.DescribedObject
	}
	return nil
}

func (x *ObjectMetricSource) GetTarget() *MetricTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ObjectMetricSource) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

// ObjectMetricStatus indicates the current value of a metric describing a
// kubernetes object (for example, hits-per-second on an Ingress object).
type ObjectMetricStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric identifies the target metric by name and selector
	Metric *MetricIdentifier `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	// current contains the current value for the given metric
	Current         *MetricValueStatus           `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
	DescribedObject *CrossVersionObjectReference `protobuf:"bytes,3,opt,name=describedObject" json:"describedObject,omitempty"`
}

func (x *ObjectMetricStatus) Reset() {
	*x = ObjectMetricStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectMetricStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMetricStatus) ProtoMessage() {}

func (x *ObjectMetricStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMetricStatus.ProtoReflect.Descriptor instead.
func (*ObjectMetricStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{19}
}

func (x *ObjectMetricStatus) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *ObjectMetricStatus) GetCurrent() *MetricValueStatus {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *ObjectMetricStatus) GetDescribedObject() *CrossVersionObjectReference {
	if x != nil {
		return x.DescribedObject
	}
	return nil
}

// PodsMetricSource indicates how to scale on a metric describing each pod in
// the current scale target (for example, transactions-processed-per-second).
// The values will be averaged together before being compared to the target
// value.
type PodsMetricSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric identifies the target metric by name and selector
	Metric *MetricIdentifier `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	// target specifies the target value for the given metric
	Target *MetricTarget `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (x *PodsMetricSource) Reset() {
	*x = PodsMetricSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodsMetricSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodsMetricSource) ProtoMessage() {}

func (x *PodsMetricSource) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodsMetricSource.ProtoReflect.Descriptor instead.
func (*PodsMetricSource) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{20}
}

func (x *PodsMetricSource) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *PodsMetricSource) GetTarget() *MetricTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

// PodsMetricStatus indicates the current value of a metric describing each pod in
// the current scale target (for example, transactions-processed-per-second).
type PodsMetricStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric identifies the target metric by name and selector
	Metric *MetricIdentifier `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	// current contains the current value for the given metric
	Current *MetricValueStatus `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
}

func (x *PodsMetricStatus) Reset() {
	*x = PodsMetricStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodsMetricStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodsMetricStatus) ProtoMessage() {}

func (x *PodsMetricStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodsMetricStatus.ProtoReflect.Descriptor instead.
func (*PodsMetricStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{21}
}

func (x *PodsMetricStatus) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *PodsMetricStatus) GetCurrent() *MetricValueStatus {
	if x != nil {
		return x.Current
	}
	return nil
}

// ResourceMetricSource indicates how to scale on a resource metric known to
// Kubernetes, as specified in requests and limits, describing each pod in the
// current scale target (e.g. CPU or memory).  The values will be averaged
// together before being compared to the target.  Such metrics are built in to
// Kubernetes, and have special scaling options on top of those available to
// normal per-pod metrics using the "pods" source.  Only one "target" type
// should be set.
type ResourceMetricSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the resource in question.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// target specifies the target value for the given metric
	Target *MetricTarget `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (x *ResourceMetricSource) Reset() {
	*x = ResourceMetricSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetricSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetricSource) ProtoMessage() {}

func (x *ResourceMetricSource) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetricSource.ProtoReflect.Descriptor instead.
func (*ResourceMetricSource) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{22}
}

func (x *ResourceMetricSource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceMetricSource) GetTarget() *MetricTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

// ResourceMetricStatus indicates the current value of a resource metric known to
// Kubernetes, as specified in requests and limits, describing each pod in the
// current scale target (e.g. CPU or memory).  Such metrics are built in to
// Kubernetes, and have special scaling options on top of those available to
// normal per-pod metrics using the "pods" source.
type ResourceMetricStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the resource in question.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// current contains the current value for the given metric
	Current *MetricValueStatus `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
}

func (x *ResourceMetricStatus) Reset() {
	*x = ResourceMetricStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetricStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetricStatus) ProtoMessage() {}

func (x *ResourceMetricStatus) ProtoReflect() protoreflect.Message {
	mi := &file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetricStatus.ProtoReflect.Descriptor instead.
func (*ResourceMetricStatus) Descriptor() ([]byte, []int) {
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP(), []int{23}
}

func (x *ResourceMetricStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceMetricStatus) GetCurrent() *MetricValueStatus {
	if x != nil {
		return x.Current
	}
	return nil
}

var File_k8s_io_api_autoscaling_v2beta2_generated_proto protoreflect.FileDescriptor

var file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x36, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x1b, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x14,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x44,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x10, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x48, 0x50, 0x41,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a,
	0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1a, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4c, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x8f,
	0x02, 0x0a, 0x17, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xbb, 0x01, 0x0a, 0x1f, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x12,
	0x4d, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0xdc,
	0x01, 0x0a, 0x20, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5a, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb8, 0x01,
	0x0a, 0x1b, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x1b, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x63, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x22, 0xad, 0x03, 0x0a, 0x1d, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x54, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x60, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x77, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc3, 0x03,
	0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x64, 0x73,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x50, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x22, 0xc5, 0x03, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x64, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0xec, 0x01, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x02, 0x0a, 0x12, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x65, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x48,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x48, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xa2, 0x01,
	0x0a, 0x10, 0x50, 0x6f, 0x64, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x70,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0x77, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x20, 0x5a, 0x1e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x32,
}

var (
	file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescOnce sync.Once
	file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescData = file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDesc
)

func file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescGZIP() []byte {
	file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescOnce.Do(func() {
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescData = protoimpl.X.CompressGZIP(file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescData)
	})
	return file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDescData
}

var file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_k8s_io_api_autoscaling_v2beta2_generated_proto_goTypes = []interface{}{
	(*ContainerResourceMetricSource)(nil),    // 0: k8s.io.api.autoscaling.v2beta2.ContainerResourceMetricSource
	(*ContainerResourceMetricStatus)(nil),    // 1: k8s.io.api.autoscaling.v2beta2.ContainerResourceMetricStatus
	(*CrossVersionObjectReference)(nil),      // 2: k8s.io.api.autoscaling.v2beta2.CrossVersionObjectReference
	(*ExternalMetricSource)(nil),             // 3: k8s.io.api.autoscaling.v2beta2.ExternalMetricSource
	(*ExternalMetricStatus)(nil),             // 4: k8s.io.api.autoscaling.v2beta2.ExternalMetricStatus
	(*HPAScalingPolicy)(nil),                 // 5: k8s.io.api.autoscaling.v2beta2.HPAScalingPolicy
	(*HPAScalingRules)(nil),                  // 6: k8s.io.api.autoscaling.v2beta2.HPAScalingRules
	(*HorizontalPodAutoscaler)(nil),          // 7: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscaler
	(*HorizontalPodAutoscalerBehavior)(nil),  // 8: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior
	(*HorizontalPodAutoscalerCondition)(nil), // 9: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition
	(*HorizontalPodAutoscalerList)(nil),      // 10: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerList
	(*HorizontalPodAutoscalerSpec)(nil),      // 11: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec
	(*HorizontalPodAutoscalerStatus)(nil),    // 12: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus
	(*MetricIdentifier)(nil),                 // 13: k8s.io.api.autoscaling.v2beta2.MetricIdentifier
	(*MetricSpec)(nil),                       // 14: k8s.io.api.autoscaling.v2beta2.MetricSpec
	(*MetricStatus)(nil),                     // 15: k8s.io.api.autoscaling.v2beta2.MetricStatus
	(*MetricTarget)(nil),                     // 16: k8s.io.api.autoscaling.v2beta2.MetricTarget
	(*MetricValueStatus)(nil),                // 17: k8s.io.api.autoscaling.v2beta2.MetricValueStatus
	(*ObjectMetricSource)(nil),               // 18: k8s.io.api.autoscaling.v2beta2.ObjectMetricSource
	(*ObjectMetricStatus)(nil),               // 19: k8s.io.api.autoscaling.v2beta2.ObjectMetricStatus
	(*PodsMetricSource)(nil),                 // 20: k8s.io.api.autoscaling.v2beta2.PodsMetricSource
	(*PodsMetricStatus)(nil),                 // 21: k8s.io.api.autoscaling.v2beta2.PodsMetricStatus
	(*ResourceMetricSource)(nil),             // 22: k8s.io.api.autoscaling.v2beta2.ResourceMetricSource
	(*ResourceMetricStatus)(nil),             // 23: k8s.io.api.autoscaling.v2beta2.ResourceMetricStatus
	(*v1.ObjectMeta)(nil),                    // 24: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v1.Time)(nil),                          // 25: k8s.io.apimachinery.pkg.apis.meta.v1.Time
	(*v1.ListMeta)(nil),                      // 26: k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	(*v1.LabelSelector)(nil),                 // 27: k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	(*resource.Quantity)(nil),                // 28: k8s.io.apimachinery.pkg.api.resource.Quantity
}
var file_k8s_io_api_autoscaling_v2beta2_generated_proto_depIdxs = []int32{
	16, // 0: k8s.io.api.autoscaling.v2beta2.ContainerResourceMetricSource.target:type_name -> k8s.io.api.autoscaling.v2beta2.MetricTarget
	17, // 1: k8s.io.api.autoscaling.v2beta2.ContainerResourceMetricStatus.current:type_name -> k8s.io.api.autoscaling.v2beta2.MetricValueStatus
	13, // 2: k8s.io.api.autoscaling.v2beta2.ExternalMetricSource.metric:type_name -> k8s.io.api.autoscaling.v2beta2.MetricIdentifier
	16, // 3: k8s.io.api.autoscaling.v2beta2.ExternalMetricSource.target:type_name -> k8s.io.api.autoscaling.v2beta2.MetricTarget
	13, // 4: k8s.io.api.autoscaling.v2beta2.ExternalMetricStatus.metric:type_name -> k8s.io.api.autoscaling.v2beta2.MetricIdentifier
	17, // 5: k8s.io.api.autoscaling.v2beta2.ExternalMetricStatus.current:type_name -> k8s.io.api.autoscaling.v2beta2.MetricValueStatus
	5,  // 6: k8s.io.api.autoscaling.v2beta2.HPAScalingRules.policies:type_name -> k8s.io.api.autoscaling.v2beta2.HPAScalingPolicy
	24, // 7: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscaler.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	11, // 8: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscaler.spec:type_name -> k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec
	12, // 9: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscaler.status:type_name -> k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus
	6,  // 10: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior.scaleUp:type_name -> k8s.io.api.autoscaling.v2beta2.HPAScalingRules
	6,  // 11: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior.scaleDown:type_name -> k8s.io.api.autoscaling.v2beta2.HPAScalingRules
	25, // 12: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition.lastTransitionTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	26, // 13: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerList.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	7,  // 14: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerList.items:type_name -> k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscaler
	2,  // 15: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec.scaleTargetRef:type_name -> k8s.io.api.autoscaling.v2beta2.CrossVersionObjectReference
	14, // 16: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec.metrics:type_name -> k8s.io.api.autoscaling.v2beta2.MetricSpec
	8,  // 17: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec.behavior:type_name -> k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior
	25, // 18: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus.lastScaleTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	15, // 19: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus.currentMetrics:type_name -> k8s.io.api.autoscaling.v2beta2.MetricStatus
	9,  // 20: k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus.conditions:type_name -> k8s.io.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition
	27, // 21: k8s.io.api.autoscaling.v2beta2.MetricIdentifier.selector:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	18, // 22: k8s.io.api.autoscaling.v2beta2.MetricSpec.object:type_name -> k8s.io.api.autoscaling.v2beta2.ObjectMetricSource
	20, // 23: k8s.io.api.autoscaling.v2beta2.MetricSpec.pods:type_name -> k8s.io.api.autoscaling.v2beta2.PodsMetricSource
	22, // 24: k8s.io.api.autoscaling.v2beta2.MetricSpec.resource:type_name -> k8s.io.api.autoscaling.v2beta2.ResourceMetricSource
	0,  // 25: k8s.io.api.autoscaling.v2beta2.MetricSpec.containerResource:type_name -> k8s.io.api.autoscaling.v2beta2.ContainerResourceMetricSource
	3,  // 26: k8s.io.api.autoscaling.v2beta2.MetricSpec.external:type_name -> k8s.io.api.autoscaling.v2beta2.ExternalMetricSource
	19, // 27: k8s.io.api.autoscaling.v2beta2.MetricStatus.object:type_name -> k8s.io.api.autoscaling.v2beta2.ObjectMetricStatus
	21, // 28: k8s.io.api.autoscaling.v2beta2.MetricStatus.pods:type_name -> k8s.io.api.autoscaling.v2beta2.PodsMetricStatus
	23, // 29: k8s.io.api.autoscaling.v2beta2.MetricStatus.resource:type_name -> k8s.io.api.autoscaling.v2beta2.ResourceMetricStatus
	1,  // 30: k8s.io.api.autoscaling.v2beta2.MetricStatus.containerResource:type_name -> k8s.io.api.autoscaling.v2beta2.ContainerResourceMetricStatus
	4,  // 31: k8s.io.api.autoscaling.v2beta2.MetricStatus.external:type_name -> k8s.io.api.autoscaling.v2beta2.ExternalMetricStatus
	28, // 32: k8s.io.api.autoscaling.v2beta2.MetricTarget.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	28, // 33: k8s.io.api.autoscaling.v2beta2.MetricTarget.averageValue:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	28, // 34: k8s.io.api.autoscaling.v2beta2.MetricValueStatus.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	28, // 35: k8s.io.api.autoscaling.v2beta2.MetricValueStatus.averageValue:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	2,  // 36: k8s.io.api.autoscaling.v2beta2.ObjectMetricSource.describedObject:type_name -> k8s.io.api.autoscaling.v2beta2.CrossVersionObjectReference
	16, // 37: k8s.io.api.autoscaling.v2beta2.ObjectMetricSource.target:type_name -> k8s.io.api.autoscaling.v2beta2.MetricTarget
	13, // 38: k8s.io.api.autoscaling.v2beta2.ObjectMetricSource.metric:type_name -> k8s.io.api.autoscaling.v2beta2.MetricIdentifier
	13, // 39: k8s.io.api.autoscaling.v2beta2.ObjectMetricStatus.metric:type_name -> k8s.io.api.autoscaling.v2beta2.MetricIdentifier
	17, // 40: k8s.io.api.autoscaling.v2beta2.ObjectMetricStatus.current:type_name -> k8s.io.api.autoscaling.v2beta2.MetricValueStatus
	2,  // 41: k8s.io.api.autoscaling.v2beta2.ObjectMetricStatus.describedObject:type_name -> k8s.io.api.autoscaling.v2beta2.CrossVersionObjectReference
	13, // 42: k8s.io.api.autoscaling.v2beta2.PodsMetricSource.metric:type_name -> k8s.io.api.autoscaling.v2beta2.MetricIdentifier
	16, // 43: k8s.io.api.autoscaling.v2beta2.PodsMetricSource.target:type_name -> k8s.io.api.autoscaling.v2beta2.MetricTarget
	13, // 44: k8s.io.api.autoscaling.v2beta2.PodsMetricStatus.metric:type_name -> k8s.io.api.autoscaling.v2beta2.MetricIdentifier
	17, // 45: k8s.io.api.autoscaling.v2beta2.PodsMetricStatus.current:type_name -> k8s.io.api.autoscaling.v2beta2.MetricValueStatus
	16, // 46: k8s.io.api.autoscaling.v2beta2.ResourceMetricSource.target:type_name -> k8s.io.api.autoscaling.v2beta2.MetricTarget
	17, // 47: k8s.io.api.autoscaling.v2beta2.ResourceMetricStatus.current:type_name -> k8s.io.api.autoscaling.v2beta2.MetricValueStatus
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_k8s_io_api_autoscaling_v2beta2_generated_proto_init() }
func file_k8s_io_api_autoscaling_v2beta2_generated_proto_init() {
	if File_k8s_io_api_autoscaling_v2beta2_generated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResourceMetricSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResourceMetricStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossVersionObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalMetricSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalMetricStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPAScalingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPAScalingRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscalerBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscalerCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscalerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscalerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscalerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricValueStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectMetricSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectMetricStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodsMetricSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodsMetricStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetricSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetricStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_k8s_io_api_autoscaling_v2beta2_generated_proto_goTypes,
		DependencyIndexes: file_k8s_io_api_autoscaling_v2beta2_generated_proto_depIdxs,
		MessageInfos:      file_k8s_io_api_autoscaling_v2beta2_generated_proto_msgTypes,
	}.Build()
	File_k8s_io_api_autoscaling_v2beta2_generated_proto = out.File
	file_k8s_io_api_autoscaling_v2beta2_generated_proto_rawDesc = nil
	file_k8s_io_api_autoscaling_v2beta2_generated_proto_goTypes = nil
	file_k8s_io_api_autoscaling_v2beta2_generated_proto_depIdxs = nil
}
